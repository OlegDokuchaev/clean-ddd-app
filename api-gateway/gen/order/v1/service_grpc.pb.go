// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateOrder_FullMethodName               = "/order.v1.OrderService/CreateOrder"
	OrderService_CancelOrderByCustomer_FullMethodName     = "/order.v1.OrderService/CancelOrderByCustomer"
	OrderService_CompleteDelivery_FullMethodName          = "/order.v1.OrderService/CompleteDelivery"
	OrderService_GetOrdersByCustomer_FullMethodName       = "/order.v1.OrderService/GetOrdersByCustomer"
	OrderService_GetCurrentOrdersByCourier_FullMethodName = "/order.v1.OrderService/GetCurrentOrdersByCourier"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrderService provides operations for creating and managing orders.
// API Version: v1
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	CancelOrderByCustomer(ctx context.Context, in *CancelOrderByCustomerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CompleteDelivery(ctx context.Context, in *CompleteDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrdersByCustomer(ctx context.Context, in *GetOrdersByCustomerRequest, opts ...grpc.CallOption) (*GetOrdersByCustomerResponse, error)
	GetCurrentOrdersByCourier(ctx context.Context, in *GetCurrentOrdersByCourierRequest, opts ...grpc.CallOption) (*GetCurrentOrdersByCourierResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrderByCustomer(ctx context.Context, in *CancelOrderByCustomerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_CancelOrderByCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CompleteDelivery(ctx context.Context, in *CompleteDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_CompleteDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByCustomer(ctx context.Context, in *GetOrdersByCustomerRequest, opts ...grpc.CallOption) (*GetOrdersByCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersByCustomerResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrdersByCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCurrentOrdersByCourier(ctx context.Context, in *GetCurrentOrdersByCourierRequest, opts ...grpc.CallOption) (*GetCurrentOrdersByCourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentOrdersByCourierResponse)
	err := c.cc.Invoke(ctx, OrderService_GetCurrentOrdersByCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
//
// OrderService provides operations for creating and managing orders.
// API Version: v1
type OrderServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	CancelOrderByCustomer(context.Context, *CancelOrderByCustomerRequest) (*emptypb.Empty, error)
	CompleteDelivery(context.Context, *CompleteDeliveryRequest) (*emptypb.Empty, error)
	GetOrdersByCustomer(context.Context, *GetOrdersByCustomerRequest) (*GetOrdersByCustomerResponse, error)
	GetCurrentOrdersByCourier(context.Context, *GetCurrentOrdersByCourierRequest) (*GetCurrentOrdersByCourierResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrderByCustomer(context.Context, *CancelOrderByCustomerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrderByCustomer not implemented")
}
func (UnimplementedOrderServiceServer) CompleteDelivery(context.Context, *CompleteDeliveryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteDelivery not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByCustomer(context.Context, *GetOrdersByCustomerRequest) (*GetOrdersByCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByCustomer not implemented")
}
func (UnimplementedOrderServiceServer) GetCurrentOrdersByCourier(context.Context, *GetCurrentOrdersByCourierRequest) (*GetCurrentOrdersByCourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentOrdersByCourier not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrderByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrderByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrderByCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrderByCustomer(ctx, req.(*CancelOrderByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CompleteDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CompleteDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CompleteDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CompleteDelivery(ctx, req.(*CompleteDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrdersByCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByCustomer(ctx, req.(*GetOrdersByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCurrentOrdersByCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentOrdersByCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCurrentOrdersByCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetCurrentOrdersByCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCurrentOrdersByCourier(ctx, req.(*GetCurrentOrdersByCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrderByCustomer",
			Handler:    _OrderService_CancelOrderByCustomer_Handler,
		},
		{
			MethodName: "CompleteDelivery",
			Handler:    _OrderService_CompleteDelivery_Handler,
		},
		{
			MethodName: "GetOrdersByCustomer",
			Handler:    _OrderService_GetOrdersByCustomer_Handler,
		},
		{
			MethodName: "GetCurrentOrdersByCourier",
			Handler:    _OrderService_GetCurrentOrdersByCourier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
